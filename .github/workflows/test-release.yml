name: Test Release Workflow

on:
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Test version to simulate (e.g., 0.3.15-rc.1)'
        required: true
        default: '0.3.15-rc.1'
      simulate_release:
        description: 'Simulate creating a release?'
        type: boolean
        default: false

jobs:
  test-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build wheel setuptools twine

      - name: Run tests
        run: |
          pytest tests/ --cov=src/ --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Build package
        run: |
          python -m build

      - name: Verify package
        run: |
          # Check if package files were created
          if [ ! -f "dist/*.whl" ] || [ ! -f "dist/*.tar.gz" ]; then
            echo "‚ùå Package build failed - missing distribution files"
            exit 1
          fi

          echo "‚úÖ Package built successfully:"
          ls -la dist/

      - name: Extract test version
        id: version
        run: |
          TEST_VERSION="${{ github.event.inputs.test_version }}"
          echo "test_version=${TEST_VERSION}" >> $GITHUB_OUTPUT
          echo "test_version_without_v=${TEST_VERSION}" >> $GITHUB_OUTPUT
          echo "Testing with version: ${TEST_VERSION}"

      - name: Verify version consistency
        run: |
          # Check if setup.py version matches test version
          SETUP_VERSION=$(grep 'version=' setup.py | sed 's/.*version="\([^"]*\)".*/\1/')
          INIT_VERSION=$(grep '__version__' src/story_protocol_python_sdk/__init__.py | sed "s/.*__version__ = \"\([^']*\)\".*/\1/")
          TEST_VERSION="${{ steps.version.outputs.test_version }}"

          echo "Setup.py version: $SETUP_VERSION"
          echo "Init.py version: $INIT_VERSION"
          echo "Test version: $TEST_VERSION"

          if [ "$SETUP_VERSION" != "$TEST_VERSION" ]; then
            echo "‚ùå Setup.py version ($SETUP_VERSION) doesn't match test version ($TEST_VERSION)"
            echo "‚ö†Ô∏è This is expected if you're testing with a different version"
          else
            echo "‚úÖ Setup.py version matches test version"
          fi

          if [ "$INIT_VERSION" != "$TEST_VERSION" ]; then
            echo "‚ùå Init.py version ($INIT_VERSION) doesn't match test version ($TEST_VERSION)"
            echo "‚ö†Ô∏è This is expected if you're testing with a different version"
          else
            echo "‚úÖ Init.py version matches test version"
          fi

      - name: Simulate Release Creation
        if: ${{ github.event.inputs.simulate_release }}
        run: |
          echo "üß™ SIMULATING: Would create GitHub release for version ${{ steps.version.outputs.test_version }}"
          echo "üß™ SIMULATING: Would upload assets:"
          echo "  - story_protocol_python_sdk-${{ steps.version.outputs.test_version }}-py3-none-any.whl"
          echo "  - story_protocol_python_sdk-${{ steps.version.outputs.test_version }}.tar.gz"
          echo "üß™ SIMULATING: Would mark as pre-release: ${{ contains(steps.version.outputs.test_version, 'rc') || contains(steps.version.outputs.test_version, 'alpha') || contains(steps.version.outputs.test_version, 'beta') }}"

          echo ""
          echo "üéØ Release notes would include:"
          echo "## What's Changed"
          echo "This release implements enhancements to improve the functionality of the WIP Module and overall testing coverage."
          echo ""
          echo "## Features & Enhancements"
          echo "### WIP Module"
          echo "- Enhanced test coverage for WIP token approval and transferFrom functionality"
          echo "- Added comprehensive negative test cases for WIP transfers"
          echo "- Implemented testing with multiple wallet configurations"
          echo "- Added validation for transfer to zero address and contract address scenarios"

      - name: Test Package Installation
        run: |
          echo "üß™ Testing package installation locally..."

          # Try to install the built package
          if [ -f "dist/*.whl" ]; then
            echo "‚úÖ Wheel file exists, would install with:"
            echo "pip install dist/*.whl"
          else
            echo "‚ùå Wheel file missing"
          fi

          if [ -f "dist/*.tar.gz" ]; then
            echo "‚úÖ Source distribution exists, would install with:"
            echo "pip install dist/*.tar.gz"
          else
            echo "‚ùå Source distribution missing"
          fi

      - name: Cleanup Test Artifacts
        if: always()
        run: |
          echo "üßπ Cleaning up test artifacts"
          rm -rf dist/ build/ *.egg-info/
          echo "Cleanup completed"

      - name: Test Results Summary
        run: |
          echo "üéâ Test Release Workflow completed successfully!"
          echo "üì¶ Package built and verified"
          echo "üß™ Version consistency checked"
          echo "‚úÖ All tests passed"
          echo ""
          echo "To test the real release workflow:"
          echo "1. Update version files to match test version"
          echo "2. Create and push a git tag"
          echo "3. Watch the real release workflow run"
          echo ""
          echo "Test version used: ${{ steps.version.outputs.test_version }}"
